openapi: 3.0.0
info:
  description: |
    To get started with our Nova Upload Service API, you first need to create an account (via Identity API - /admin/users) or log in (via Identity API - /admin/login) to your existing account.
    </br>Once youâ€™re logged in, you can use the authorization (Green AUTHORIZE button) option provided below to authenticate your requests. This authorization will enable you to make all API calls securely.
    </br></br>Make sure you follow the steps to obtain your access token, which is necessary for accessing the various endpoints of our API.
    </br></br>
    This documentation allows you to test API calls directly using the "Try it Out" button. Simply click this button to enable input fields where you can provide the necessary request body/parameters.
    </br>Once you've entered your data, hit the "Execute" button to send the request. You'll receive a response right here, making it easy to explore and understand our API functionality.
    </br></br>Happy testing!
  title: Nova Upload Service documentation

servers:
  - url: http://localhost:3000/admin
    description: Local Server
  - url: https://api.qa.fireboltconnect.com
    description: QA Firebolt Connect

tags:
  - name: "Identity API"
  - name: "Sign Document (RALA)"
  - name: "Upload API"
  - name: "Warehouse API"

security:
  - JWT: []

paths:

  # /users
  /users:
    post:
      $ref: "./endpoints/users/createUser.yml"

  /users/me:
    get:
      $ref: "./endpoints/users/getUserInfo.yml"
    patch:
      $ref: "./endpoints/users/updateUserInfo.yml"
  /users/validate:
    get:
      $ref: "./endpoints/users/validateUser.yml"
  /users/requestresetpassword:
    post:
      $ref: "./endpoints/users/requestResetPassword.yml"
  /users/resetpassword:
    post:
      $ref: "./endpoints/users/resetPassword.yml"

  # /login
  /login:
    post:
      $ref: "./endpoints/users/loginUser.yml"

  # /signeddocuments
  /signeddocuments:
    post:
      $ref: "./endpoints/sign-document/createDocument.yml"
  /signeddocuments/latest:
    get:
      $ref: "./endpoints/sign-document/getDocument.yml"
  /signeddocuments/sign:
    post:
      $ref: "./endpoints/sign-document/signDocument.yml"

  # applications
  /applications:
    post:
      $ref: "./endpoints/applications/createApplication.yml"
    get:
      $ref: "./endpoints/applications/listApplications.yml"
  /applications/{applicationId}:
    parameters:
    - name: applicationId
      in: path
      required: true
      description: The ID of the application to retrieve
      schema:
        type: string
    get:
      $ref: "./endpoints/applications/getApplication.yml"
    put:
      $ref: "./endpoints/applications/updateApplication.yml"
    delete:
      $ref: "./endpoints/applications/deleteApplication.yml"
  /applications/{applicationId}/restore:
    parameters:
    - name: applicationId
      in: path
      required: true
      description: The ID of the application to retrieve
      schema:
        type: string
    patch:
      $ref: "./endpoints/applications/restoreApplication.yml"

  # application versions
  /applications/{applicationId}/versions:
    parameters:
    - name: applicationId
      in: path
      required: true
      description: The ID of the application to retrieve
      schema:
        type: string
    post:
      $ref: "./endpoints/application-versions/createVersion.yml"
    get:
      $ref: "./endpoints/application-versions/listVersions.yml"
  /applications/{applicationId}/versions/{versionId}:
    parameters:
    - name: applicationId
      in: path
      required: true
      description: The ID of the application to retrieve
      schema:
        type: string
    - name: versionId
      in: path
      required: true
      description: The ID of the application version to retrieve
      schema:
        type: string
    get:
      $ref: "./endpoints/application-versions/getVersion.yml"
    put:
      $ref: "./endpoints/application-versions/updateVersion.yml"
    delete:
      $ref: "./endpoints/application-versions/deleteVersion.yml"
  /applications/{applicationId}/versions/{versionId}/restore:
    parameters:
    - name: applicationId
      in: path
      required: true
      description: The ID of the application to retrieve
      schema:
        type: string
    - name: versionId
      in: path
      required: true
      description: The ID of the application version to retrieve
      schema:
        type: string
    patch:
      $ref: "./endpoints/application-versions/restoreVersion.yml"
  /applications/{applicationId}/versions/{versionId}/upload:
      parameters:
      - name: applicationId
        in: path
        required: true
        description: The ID of the application to retrieve
        schema:
          type: string
      - name: versionId
        in: path
        required: true
        description: The ID of the application version to retrieve
        schema:
          type: string
      post:
        $ref: "./endpoints/application-versions/uploadVersion.yml"
components:
  securitySchemes:
    JWT: # Login required
      type: http
      scheme: bearer
      bearerFormat: JWT
