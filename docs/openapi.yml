openapi: 3.0.0
info:
  description: |
    Nova Upload Service reference documentation.
  version: 1.0.0
  title: Nova Upload Service documentation
servers:
  - url: 'http://localhost:3000/admin'
    description: Local Server
tags:
  - name: Authentication
    description: Login endpoint
  - name: Users
    description: User endpoints
  - name: Applications
    description: Application endpoints
  - name: Application versions
    description: Application version endpoint
security:
  - JWT: []
paths:
  /users:
    post:
      tags:
        - Users
      summary: Creates user
      description: The user sign up operation that can be used by anyone.
      operationId: createUser
      security: []
      requestBody:
        required: true
        description: User data
        content:
          application/json:
            schema:
              required:
                - email
                - password
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
                  pattern: '^(?=.*[A-Z])(?=.*[0-9])(?=.*[a-z]).{8,}$'
                  description: 'The password must contain at least one uppercase letter, one number, and one lowercase letter, and must be at least 8 characters long.'
      responses:
        '201':
          description: User is created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    allOf:
                      - $ref: '#/paths/~1users~1me/get/responses/200/content/application~1json/schema'
                      - type: object
                        properties:
                          token:
                            type: string
                            example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                            description: JWT token for authentication
                          tokenExpiresAt:
                            type: string
                            format: date-time
                            example: 'Wed, 30 Aug 2023 01:20:37 GMT'
                            description: Token expiration date in GMT
                  status:
                    type: string
                    enum:
                      - success
                      - error
                    default: success
                    description: Status for overall request
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    default: error
                  message:
                    type: string
                    example: Operation failed
                  errors:
                    type: array
                    items:
                      type: string
                    nullable: true
                    example:
                      - dataInvalid
                      - identifierNotUnique
  /users/me:
    get:
      tags:
        - Users
      summary: Gets user data for logged in user
      description: Gets user data for logged in user
      operationId: getUserInfo
      security:
        - JWT:
            - user
      responses:
        '200':
          description: User data
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: bson-objectid
                    example: 507f1f77bcf86cd799439011
                    description: Unique identifier for the user
                  email:
                    type: string
                    format: email
                    description: User email address. Must be unique.
                  type:
                    type: string
                    enum:
                      - dev
                      - mvpd
                      - admin
                    default: dev
                    description: Type of user.
                  status:
                    type: string
                    default: ok
                    description: Status of the user account.
                  lastLoginAt:
                    type: string
                    format: date-time
                    default: null
                    example: '2023-08-29T22:20:37.615Z'
                    description: Timestamp of the user's last login.
                  createdAt:
                    type: string
                    format: date-time
                    default: null
                    example: '2023-08-29T22:20:37.615Z'
                    description: Create time of the user record.
                  updatedAt:
                    type: string
                    format: date-time
                    default: null
                    example: '2023-08-29T22:20:37.615Z'
                    description: Time of last update of the user record.
                required:
                  - email
                  - password
        '400':
          $ref: '#/paths/~1users/post/responses/400'
        '401':
          description: Authorization required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    default: error
                  message:
                    type: string
                    example: Authorization required
        '404':
          description: Item/object/path not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    default: error
                  message:
                    type: string
                    example: Not found
    patch:
      tags:
        - Users
      summary: Updates user data
      description: 'Updates user data (email and password), requires current password.'
      operationId: updateUserInfo
      security:
        - JWT:
            - user
      requestBody:
        required: true
        description: User data
        content:
          application/json:
            schema:
              required:
                - email
                - password
              type: object
              properties:
                currentPassword:
                  type: string
                  format: password
                  pattern: '^(?=.*[A-Z])(?=.*[0-9])(?=.*[a-z]).{8,}$'
                  description: The existing password for the user
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
                  pattern: '^(?=.*[A-Z])(?=.*[0-9])(?=.*[a-z]).{8,}$'
                  description: 'The password must contain at least one uppercase letter, one number, and one lowercase letter, and must be at least 8 characters long.'
      responses:
        '201':
          description: User data updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/paths/~1users~1me/get/responses/200/content/application~1json/schema'
                  status:
                    type: string
                    enum:
                      - success
                      - error
                    default: success
                    description: Status for overall request
        '400':
          $ref: '#/paths/~1users/post/responses/400'
        '401':
          $ref: '#/paths/~1users~1me/get/responses/401'
  /login:
    post:
      tags:
        - Authentication
      summary: Creates authentication token
      description: Creates authentication token for the user
      operationId: login user
      security: []
      requestBody:
        required: true
        description: Credentials
        content:
          application/json:
            schema:
              required:
                - email
                - password
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
                  pattern: '^(?=.*[A-Z])(?=.*[0-9])(?=.*[a-z]).{8,}$'
      responses:
        '201':
          description: Authentication token is created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/paths/~1users/post/responses/201/content/application~1json/schema/properties/data'
                  status:
                    type: string
                    enum:
                      - success
                      - error
                    default: success
                    description: Status for overall request
        '400':
          $ref: '#/paths/~1users/post/responses/400'
  /applications:
    post:
      tags:
        - Applications
      summary: Creates application
      description: Creates application record
      operationId: createApplication
      security:
        - JWT:
            - user
      requestBody:
        required: true
        description: App data
        content:
          application/json:
            schema:
              required:
                - identifier
                - name
              type: object
              properties:
                identifier:
                  type: string
                  description: A unique identifier for the app
                  example: my-cool-app
                name:
                  type: string
                  description: A name for the app
                  example: My cool app
                info:
                  type: string
                  description: A description text for the app
                metadata:
                  type: object
                  description: Metadata object that can contain any app-specific custom data
                isHosted:
                  type: boolean
                  default: true
                  description: If the app is hosted on the service or is served over an external service
                location:
                  type: string
                  description: The location (URL) of the app if it is hosted externally
                status:
                  type: string
                  enum:
                    - active
                    - inactive
                  example: inactive
                  description: The status of the app
                  default: inactive
                image:
                  type: string
                  description: The URL of the application image
      responses:
        '201':
          description: Application is created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/paths/~1applications/get/responses/200/content/application~1json/schema/items'
                  status:
                    type: string
                    enum:
                      - success
                      - error
                    default: success
                    description: Status for overall request
        '400':
          $ref: '#/paths/~1users/post/responses/400'
        '401':
          $ref: '#/paths/~1users~1me/get/responses/401'
    get:
      tags:
        - Applications
      summary: Gets the list of applications
      description: Gets the list of applications managed by the logged-in user
      operationId: listApplications
      security:
        - JWT:
            - user
      responses:
        '200':
          description: Application list
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: bson-objectid
                      readOnly: true
                      example: 507f1f77bcf86cd799439011
                      description: 'Unique identifier for the Application, generated by MongoDB'
                    identifier:
                      type: string
                      example: my-application
                      description: Unique identifier for the application
                    name:
                      type: string
                      example: My Application
                    info:
                      type: string
                      nullable: true
                      example: Some information about this application
                    metadata:
                      type: object
                      nullable: true
                    image:
                      type: string
                      nullable: true
                      example: 'https://example.com/image.jpg'
                    status:
                      type: string
                      enum:
                        - active
                        - inactive
                      default: inactive
                      example: inactive
                    isHosted:
                      type: boolean
                      default: true
                    location:
                      type: string
                      nullable: true
                      example: 'http://example.com/my-application/index.html'
                    changeLog:
                      type: array
                      items:
                        type: object
                    history:
                      type: array
                      items:
                        type: object
                    createdAt:
                      type: string
                      format: date-time
                      readOnly: true
                      example: '2023-08-30T01:08:32Z'
                    updatedAt:
                      type: string
                      format: date-time
                      readOnly: true
                      example: '2023-08-30T01:08:32Z'
        '400':
          $ref: '#/paths/~1users/post/responses/400'
        '401':
          $ref: '#/paths/~1users~1me/get/responses/401'
  '/applications/:applicationId':
    parameters:
      - name: applicationId
        in: path
        required: true
        description: The ID of the application to retrieve
        schema:
          type: string
    get:
      tags:
        - Applications
      summary: Gets a specific application with given app Id
      description: Gets a specific application with given app Id
      operationId: getApplication
      security:
        - JWT:
            - user
      responses:
        '200':
          description: Application data
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: bson-objectid
                    readOnly: true
                    example: 507f1f77bcf86cd799439011
                    description: 'Unique identifier for the Application, generated by MongoDB'
                  identifier:
                    type: string
                    example: my-application
                    description: Unique identifier for the application
                  name:
                    type: string
                    example: My Application
                  info:
                    type: string
                    nullable: true
                    example: Some information about this application
                  metadata:
                    type: object
                    nullable: true
                  image:
                    type: string
                    nullable: true
                    example: 'https://example.com/image.jpg'
                  status:
                    type: string
                    enum:
                      - active
                      - inactive
                    default: inactive
                    example: inactive
                  isHosted:
                    type: boolean
                    default: true
                  location:
                    type: string
                    nullable: true
                    example: 'http://example.com/my-application/index.html'
                  versions:
                    type: array
                    items:
                      $ref: '#/paths/~1applications~1%3AapplicationId~1versions~1%3AversionId/get/responses/200/content/application~1json/schema'
                  changeLog:
                    type: array
                    items:
                      type: object
                  history:
                    type: array
                    items:
                      type: object
                  createdAt:
                    type: string
                    format: date-time
                    readOnly: true
                    example: '2023-08-30T01:08:32Z'
                  updatedAt:
                    type: string
                    format: date-time
                    readOnly: true
                    example: '2023-08-30T01:08:32Z'
        '400':
          $ref: '#/paths/~1users/post/responses/400'
        '401':
          $ref: '#/paths/~1users~1me/get/responses/401'
        '404':
          $ref: '#/paths/~1users~1me/get/responses/404'
    put:
      tags:
        - Applications
      summary: Updates application data
      description: Updates application data
      operationId: updateApplication
      security:
        - JWT:
            - user
      requestBody:
        required: true
        description: App data
        content:
          application/json:
            schema:
              type: object
              properties:
                identifier:
                  type: string
                  description: A unique identifier for the app
                  example: my-cool-app
                name:
                  type: string
                  description: A name for the app
                  example: My cool app
                info:
                  type: string
                  description: A description text for the app
                metadata:
                  type: object
                  description: Metadata object that can contain any app-specific custom data
                isHosted:
                  type: boolean
                  default: true
                  description: If the app is hosted on the service or is served over an external service
                location:
                  type: string
                  description: The location (URL) of the app if it is hosted externally
                status:
                  type: string
                  enum:
                    - active
                    - inactive
                  example: inactive
                  description: The status of the app
                  default: inactive
                image:
                  type: string
                  description: The URL of the application image
      responses:
        '200':
          description: Application is updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/paths/~1applications~1%3AapplicationId/get/responses/200/content/application~1json/schema'
                  status:
                    type: string
                    enum:
                      - success
                      - error
                    default: success
                    description: Status for overall request
        '400':
          $ref: '#/paths/~1users/post/responses/400'
        '401':
          $ref: '#/paths/~1users~1me/get/responses/401'
        '404':
          $ref: '#/paths/~1users~1me/get/responses/404'
    delete:
      tags:
        - Applications
      summary: Deletes an application
      description: Deletes an application
      operationId: deleteApplication
      security:
        - JWT:
            - user
      responses:
        '200':
          description: Application is deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                      - error
                    default: success
                    description: Status for overall request
        '400':
          $ref: '#/paths/~1users/post/responses/400'
        '401':
          $ref: '#/paths/~1users~1me/get/responses/401'
        '404':
          $ref: '#/paths/~1users~1me/get/responses/404'
  '/applications/:applicationId/restore':
    parameters:
      - name: applicationId
        in: path
        required: true
        description: The ID of the application to retrieve
        schema:
          type: string
    patch:
      tags:
        - Applications
      summary: Restores an application deleted before
      description: Restores an application deleted before
      operationId: restoreApplication
      security:
        - JWT:
            - admin
      responses:
        '200':
          description: Application is restored
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                      - error
                    default: success
                    description: Status for overall request
        '400':
          $ref: '#/paths/~1users/post/responses/400'
        '401':
          $ref: '#/paths/~1users~1me/get/responses/401'
        '404':
          $ref: '#/paths/~1users~1me/get/responses/404'
  '/applications/:applicationId/versions':
    parameters:
      - name: applicationId
        in: path
        required: true
        description: The ID of the application to retrieve
        schema:
          type: string
    post:
      tags:
        - Application versions
      summary: Creates application version
      description: Creates application version
      operationId: createApplicationVersion
      security:
        - JWT:
            - user
      requestBody:
        required: true
        description: App version data
        content:
          application/json:
            schema:
              required:
                - version
                - changeLog
              type: object
              properties:
                version:
                  type: string
                  description: A unique identifier for the app version
                  example: v5.4.1
                changeLog:
                  type: string
                  description: Log for the version create
                  example: v5.4.1 has been released
      responses:
        '201':
          description: Application is created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/paths/~1applications~1%3AapplicationId~1versions~1%3AversionId/get/responses/200/content/application~1json/schema'
                  status:
                    type: string
                    enum:
                      - success
                      - error
                    default: success
                    description: Status for overall request
        '400':
          $ref: '#/paths/~1users/post/responses/400'
        '401':
          $ref: '#/paths/~1users~1me/get/responses/401'
        '404':
          $ref: '#/paths/~1users~1me/get/responses/404'
    get:
      tags:
        - Application versions
      summary: Gets the list of application versions for a given application
      description: Gets the list of application versions for a given application
      operationId: listApplicationVersionss
      security:
        - JWT:
            - user
      responses:
        '200':
          description: Application version list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/paths/~1applications~1%3AapplicationId~1versions~1%3AversionId/get/responses/200/content/application~1json/schema'
        '400':
          $ref: '#/paths/~1users/post/responses/400'
        '401':
          $ref: '#/paths/~1users~1me/get/responses/401'
        '404':
          $ref: '#/paths/~1users~1me/get/responses/404'
  '/applications/:applicationId/versions/:versionId':
    parameters:
      - name: applicationId
        in: path
        required: true
        description: The ID of the application to retrieve
        schema:
          type: string
      - name: versionId
        in: path
        required: true
        description: The ID of the application version to retrieve
        schema:
          type: string
    get:
      tags:
        - Application versions
      summary: Gets a specific application version with given app Id and version Id
      description: Gets a specific application version with given app Id and version Id
      operationId: getApplicationVersion
      security:
        - JWT:
            - user
      responses:
        '200':
          description: Application version data
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: bson-objectid
                    readOnly: true
                    example: 507f1f77bcf86cd799439011
                    description: 'Unique identifier for the Application Version, generated by MongoDB'
                  version:
                    type: string
                    example: v1.0.0
                    description: Version identifier for this application version
                  appIdentifier:
                    type: string
                    example: my-application
                    description: Application identifier that this version belongs to
                  applicationId:
                    type: string
                    format: bson-objectid
                    example: 507f1f77bcf86cd799439011
                    description: ObjectId of the parent Application this version belongs to
                  status:
                    type: string
                    enum:
                      - active
                      - inactive
                    default: inactive
                    example: inactive
                  changeLog:
                    type: string
                    example: Bug fixes and improvements.
                  createdAt:
                    type: string
                    format: date-time
                    readOnly: true
                    example: '2023-08-30T01:08:32Z'
                  updatedAt:
                    type: string
                    format: date-time
                    readOnly: true
                    example: '2023-08-30T01:08:32Z'
        '400':
          $ref: '#/paths/~1users/post/responses/400'
        '401':
          $ref: '#/paths/~1users~1me/get/responses/401'
        '404':
          $ref: '#/paths/~1users~1me/get/responses/404'
    put:
      tags:
        - Application versions
      summary: Updates application version data
      description: Updates application  version data
      operationId: updateApplication
      security:
        - JWT:
            - user
      requestBody:
        required: true
        description: App version data
        content:
          application/json:
            schema:
              required:
                - version
                - changeLog
              type: object
              properties:
                version:
                  type: string
                  description: A unique identifier for the app version
                  example: v5.4.1
                changeLog:
                  type: string
                  description: Log for the version create
                  example: v5.4.1 has been released
      responses:
        '200':
          description: Application version is updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/paths/~1applications~1%3AapplicationId~1versions~1%3AversionId/get/responses/200/content/application~1json/schema'
                  status:
                    type: string
                    enum:
                      - success
                      - error
                    default: success
                    description: Status for overall request
        '400':
          $ref: '#/paths/~1users/post/responses/400'
        '401':
          $ref: '#/paths/~1users~1me/get/responses/401'
        '404':
          $ref: '#/paths/~1users~1me/get/responses/404'
    delete:
      tags:
        - Application versions
      summary: Deletes an application version
      description: Deletes an application version
      operationId: deleteApplicationVersion
      security:
        - JWT:
            - user
      responses:
        '200':
          description: Application version is deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                      - error
                    default: success
                    description: Status for overall request
        '400':
          $ref: '#/paths/~1users/post/responses/400'
        '401':
          $ref: '#/paths/~1users~1me/get/responses/401'
        '404':
          $ref: '#/paths/~1users~1me/get/responses/404'
  '/applications/:applicationId/versions/:versionId/restore':
    parameters:
      - name: applicationId
        in: path
        required: true
        description: The ID of the application to retrieve
        schema:
          type: string
      - name: versionId
        in: path
        required: true
        description: The ID of the application version to retrieve
        schema:
          type: string
    patch:
      tags:
        - Application versions
      summary: Restores an application deleted before
      description: Restores an application deleted before
      operationId: restoreApplication
      security:
        - JWT:
            - admin
      responses:
        '200':
          description: Application is restored
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                      - error
                    default: success
                    description: Status for overall request
        '400':
          $ref: '#/paths/~1users/post/responses/400'
        '401':
          $ref: '#/paths/~1users~1me/get/responses/401'
        '404':
          $ref: '#/paths/~1users~1me/get/responses/404'
components:
  securitySchemes:
    JWT:
      type: http
      scheme: bearer
      bearerFormat: JWT
